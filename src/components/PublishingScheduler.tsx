import { useState } from 'react'
import { Post, Platform } from '@/types'
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Switch } from '@/components/ui/switch'
import { 
  Calendar, 
  Clock, 
  Play, 
  Pause, 
  Settings,
  Zap,
  CheckCircle,
  AlertTriangle,
  Plus,
  Copy
} from '@phosphor-icons/react'
import { format, addMinutes, addHours, addDays } from 'date-fns'
import { toast } from 'sonner'
import { useKV } from '@github/spark/hooks'

interface PublishingRule {
  id: string
  name: string
  enabled: boolean
  platforms: Platform[]
  timeSlots: {
    day: string
    times: string[]
  }[]
  contentTypes: string[]
  autoApprove: boolean
  delay: number // minutes between posts
}

interface ScheduledPost extends Post {
  publishAt: string
  queuePosition: number
  autoGenerated?: boolean
  parentRuleId?: string
}

const sampleRules: PublishingRule[] = [
  {
    id: 'rule-1',
    name: 'Daily LinkedIn Posts',
    enabled: true,
    platforms: ['linkedin'],
    timeSlots: [
      { day: 'monday', times: ['09:00', '17:00'] },
      { day: 'tuesday', times: ['09:00', '17:00'] },
      { day: 'wednesday', times: ['09:00', '17:00'] },
      { day: 'thursday', times: ['09:00', '17:00'] },
      { day: 'friday', times: ['09:00', '17:00'] }
    ],
    contentTypes: ['professional', 'industry-news'],
    autoApprove: false,
    delay: 120
  },
  {
    id: 'rule-2',
    name: 'Instagram Stories',
    enabled: true,
    platforms: ['instagram'],
    timeSlots: [
      { day: 'monday', times: ['12:00', '18:00'] },
      { day: 'wednesday', times: ['12:00', '18:00'] },
      { day: 'friday', times: ['12:00', '18:00'] }
    ],
    contentTypes: ['behind-scenes', 'team'],
    autoApprove: true,
    delay: 60
  }
]

interface PublishingSchedulerProps {
  posts: Post[]
  onSchedulePost: (post: Post, publishAt: Date) => void
  onUpdatePost: (postId: string, updates: Partial<Post>) => void
}

export function PublishingScheduler({ posts, onSchedulePost, onUpdatePost }: PublishingSchedulerProps) {
  const [rules, setRules] = useKV<PublishingRule[]>('publishing-rules', sampleRules)
  const [scheduledPosts, setScheduledPosts] = useKV<ScheduledPost[]>('scheduled-posts', [])
  const [showRuleDialog, setShowRuleDialog] = useState(false)
  const [selectedRule, setSelectedRule] = useState<PublishingRule | null>(null)
  const [isPublishing, setIsPublishing] = useState(false)

  // Get next 24 hours of scheduled posts
  const upcomingPosts = scheduledPosts
    .filter(post => new Date(post.publishAt) > new Date())
    .sort((a, b) => new Date(a.publishAt).getTime() - new Date(b.publishAt).getTime())
    .slice(0, 10)

  const generateScheduledPosts = (rule: PublishingRule) => {
    const newScheduledPosts: ScheduledPost[] = []
    const approvedPosts = posts.filter(p => p.status === 'approved' && rule.platforms.includes(p.platform))
    
    if (approvedPosts.length === 0) {
      toast.error('No approved posts available for scheduling')
      return
    }

    let postIndex = 0
    const startDate = new Date()

    // Generate posts for the next 7 days
    for (let day = 0; day < 7; day++) {
      const currentDate = addDays(startDate, day)
      const dayName = format(currentDate, 'EEEE').toLowerCase()
      
      const timeSlot = rule.timeSlots.find(slot => slot.day === dayName)
      if (!timeSlot) continue

      timeSlot.times.forEach((time, timeIndex) => {
        if (postIndex >= approvedPosts.length) return

        const [hours, minutes] = time.split(':').map(Number)
        const publishTime = new Date(currentDate)
        publishTime.setHours(hours, minutes, 0, 0)

        // Add delay between posts
        if (timeIndex > 0) {
          publishTime.setMinutes(publishTime.getMinutes() + (rule.delay * timeIndex))
        }

        const scheduledPost: ScheduledPost = {
          ...approvedPosts[postIndex],
          id: `scheduled-${Date.now()}-${postIndex}`,
          publishAt: publishTime.toISOString(),
          queuePosition: newScheduledPosts.length + 1,
          autoGenerated: true,
          parentRuleId: rule.id,
          status: rule.autoApprove ? 'approved' : 'pending'
        }

        newScheduledPosts.push(scheduledPost)
        postIndex = (postIndex + 1) % approvedPosts.length
      })
    }

    setScheduledPosts(current => [...current, ...newScheduledPosts])
    toast.success(`Generated ${newScheduledPosts.length} scheduled posts`)
  }

  const toggleRule = (ruleId: string) => {
    setRules(current =>
      current.map(rule =>
        rule.id === ruleId ? { ...rule, enabled: !rule.enabled } : rule
      )
    )
  }

  const startPublishing = async () => {
    setIsPublishing(true)
    toast.success('Publishing automation started')
    
    // Simulate publishing process
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    setIsPublishing(false)
    toast.success('Publishing completed')
  }

  const duplicatePost = (post: ScheduledPost) => {
    const duplicated: ScheduledPost = {
      ...post,
      id: `scheduled-${Date.now()}`,
      publishAt: addHours(new Date(post.publishAt), 1).toISOString(),
      queuePosition: scheduledPosts.length + 1
    }
    
    setScheduledPosts(current => [...current, duplicated])
    toast.success('Post duplicated')
  }

  const removeScheduledPost = (postId: string) => {
    setScheduledPosts(current => current.filter(p => p.id !== postId))
    toast.success('Post removed from schedule')
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Publishing Scheduler</h1>
          <p className="text-muted-foreground">Automate your content publishing workflow</p>
        </div>
        <div className="flex items-center gap-2">
          <Button
            onClick={startPublishing}
            disabled={isPublishing || upcomingPosts.length === 0}
            className="bg-green-600 hover:bg-green-700"
          >
            {isPublishing ? (
              <>
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                Publishing...
              </>
            ) : (
              <>
                <Play size={16} className="mr-2" />
                Start Publishing
              </>
            )}
          </Button>
          <Dialog open={showRuleDialog} onOpenChange={setShowRuleDialog}>
            <DialogTrigger asChild>
              <Button variant="outline">
                <Plus size={16} className="mr-2" />
                New Rule
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[500px]">
              <DialogHeader>
                <DialogTitle>Create Publishing Rule</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>Rule Name</Label>
                  <Input placeholder="e.g., Daily LinkedIn Posts" />
                </div>
                <div className="space-y-2">
                  <Label>Platforms</Label>
                  <div className="flex flex-wrap gap-2">
                    {['instagram', 'linkedin', 'twitter', 'facebook'].map(platform => (
                      <Badge key={platform} variant="outline" className="cursor-pointer">
                        {platform}
                      </Badge>
                    ))}
                  </div>
                </div>
                <div className="flex justify-end gap-2">
                  <Button variant="outline" onClick={() => setShowRuleDialog(false)}>
                    Cancel
                  </Button>
                  <Button onClick={() => setShowRuleDialog(false)}>
                    Create Rule
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Publishing Status */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Queued Posts</p>
                <div className="text-2xl font-bold">{upcomingPosts.length}</div>
              </div>
              <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                <Clock size={24} className="text-blue-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Active Rules</p>
                <div className="text-2xl font-bold">{rules.filter(r => r.enabled).length}</div>
              </div>
              <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                <Zap size={24} className="text-green-600" />
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Success Rate</p>
                <div className="text-2xl font-bold">98.5%</div>
              </div>
              <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                <CheckCircle size={24} className="text-purple-600" />
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Publishing Rules */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings size={20} />
              Publishing Rules
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {rules.map(rule => (
                <div key={rule.id} className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <h4 className="font-medium">{rule.name}</h4>
                      <Badge variant={rule.enabled ? 'default' : 'secondary'}>
                        {rule.enabled ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                    <div className="text-sm text-muted-foreground space-y-1">
                      <div>Platforms: {rule.platforms.join(', ')}</div>
                      <div>Time slots: {rule.timeSlots.length} configured</div>
                      <div>Auto-approve: {rule.autoApprove ? 'Yes' : 'No'}</div>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Switch
                      checked={rule.enabled}
                      onCheckedChange={() => toggleRule(rule.id)}
                    />
                    {rule.enabled && (
                      <Button
                        size="sm"
                        onClick={() => generateScheduledPosts(rule)}
                        variant="outline"
                      >
                        <Zap size={14} className="mr-1" />
                        Generate
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Upcoming Posts */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar size={20} />
              Upcoming Posts
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {upcomingPosts.length > 0 ? (
                upcomingPosts.map((post, index) => (
                  <div key={post.id} className="flex items-center gap-3 p-3 border rounded-lg">
                    <div className="w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0">
                      <span className="text-xs font-bold text-primary">#{index + 1}</span>
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <Badge variant="outline" className="text-xs">
                          {post.platform}
                        </Badge>
                        <span className="text-xs text-muted-foreground">
                          {format(new Date(post.publishAt), 'MMM d, h:mm a')}
                        </span>
                      </div>
                      <div className="text-sm line-clamp-1">{post.content}</div>
                    </div>

                    <div className="flex items-center gap-1">
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => duplicatePost(post)}
                      >
                        <Copy size={14} />
                      </Button>
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => removeScheduledPost(post.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        ×
                      </Button>
                    </div>
                  </div>
                ))
              ) : (
                <div className="text-center py-8 text-muted-foreground">
                  <Clock size={48} className="mx-auto mb-4 opacity-50" />
                  <div className="text-sm">No posts scheduled</div>
                  <div className="text-xs">Generate posts from your rules</div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Publishing Timeline */}
      <Card>
        <CardHeader>
          <CardTitle>Publishing Timeline</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {upcomingPosts.slice(0, 5).map((post, index) => {
              const publishTime = new Date(post.publishAt)
              const now = new Date()
              const timeUntil = publishTime.getTime() - now.getTime()
              const progress = Math.max(0, Math.min(100, ((Date.now() - now.getTime()) / timeUntil) * 100))

              return (
                <div key={post.id} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Badge variant="outline">{post.platform}</Badge>
                      <span className="text-sm font-medium line-clamp-1">
                        {post.content.slice(0, 50)}...
                      </span>
                    </div>
                    <div className="text-sm text-muted-foreground">
                      {format(publishTime, 'MMM d, h:mm a')}
                    </div>
                  </div>
                  <Progress value={progress} className="h-2" />
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default PublishingScheduler
